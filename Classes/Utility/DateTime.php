<?php
namespace Tx\CzSimpleCal\Utility;

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2010 Christian Zenker <christian.zenker@599media.de>, 599media GmbH
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

use TYPO3\CMS\Core\Utility\GeneralUtility;

/**
 * an extension of the DateTime object
 */
class DateTime extends \DateTime {

	public function __construct($dateTime = null, $timezone = null) {
		$time = StrToTime::doSubstitutions($dateTime);

		$time = GeneralUtility::trimExplode('|', $time, true);

		$thisTime = StrToTime::strftime(array_shift($time));

		if(is_null($timezone)) {
			parent::__construct($thisTime);
		} else {
			parent::__construct($thisTime, $timezone);
		}

		if(!empty($time)) {
			$this->doModify($time);
		}
	}

//	protected function doModify($modify) {
//		var_dump(strftime($modify, $this->getTimestamp()));
//
//		$time = strtotime(strftime($modify, $this->getTimestamp()), $this->getTimestamp());
//	}


	/**
	 * apply modifications on the date
	 *
	 * @param array $time
	 */
	protected function doModify($time) {
		$timezone = date_default_timezone_get();
		$timezonename = $this->getTimezone()->getName();
		if($timezonename === '+00:00') {
			//generated by "@1234567890" notation
			$timezonename = 'UTC';
		} else {
			$temp = timezone_name_from_abbr($timezonename);
			if($temp !== false) {
				$timezonename = $temp;
			}
		}
		date_default_timezone_set($timezonename);


		$now = $this->getTimestamp();

		foreach($time as $part) {
			$now = strtotime(strftime($part, $now), $now);
		}
		$this->setDate(date('Y', $now), date('n', $now), date('j', $now));
		$this->setTime(date('H', $now), date('i', $now), date('s', $now));

		date_default_timezone_set($timezone);
	}

	/**
	 * Alter the timestamp of a DateTime object by incrementing or decrementing
	 * in a format accepted by strtotime().
	 *
	 * This method overrides the default modify method of \DateTime and parses
	 * the given string to the StrToTime utility.
	 *
	 * @param string $dateTime A string that can be parsed by StrToTime.
	 * @return void
	 */
	public function modify($dateTime) {
		$time = StrToTime::doSubstitutions($dateTime);
		$time = \TYPO3\CMS\Core\Utility\GeneralUtility::trimExplode('|', $time, true);
		$this->doModify($time);
	}
//
	public function getTimestamp() {
		return $this->format('U');
	}

	public function getTimestampInteger() {
		return parent::getTimestamp();
	}
}
